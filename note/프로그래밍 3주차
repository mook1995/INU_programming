1.자바의 데이터 타입
        :기본타입의 크기는 고정이며 CPU나 운영체제에 따라 변하지 않는다.
        - 기본 타입 8개
          boolean
          char
          byte
          short
          int
          long
          float
          double

        -레퍼런스 타입 : 1개 이며 용도는 다음의 3가지이다.
          목적1: 배열에 대한 레퍼런스
          목적2: 클래스에 대한 레퍼런스
          목적3: 인터페이스에 대한 레퍼런스

2.기본데이터 타입 크기

3.문자열
        :String 클래스로 문자열을 표현한다.
        문자열이 섞인 + 연산 > 문자열을 이어붙인다.

4.변수
        :프로그램 실행 중에 값을 <<임시>> 저장하기 위한 공간이다.
        데이터 타입에서 정한 크기를 메모리에 할당한다.

        -변수 선언: 변수의 타입 다음에 변수 이름을 적어 변수를 선언한다.
        -변수 선언 사례 : int radius ;
                         char c1, c2, c3; // 3개의 변수를 한번에 선언가능

        -변수의 선언과 초기화 : 선언과 동시에 초기값을 지정할수 있다.
                            int radius = 10;
                            char c1 = 'a', c2='b', c3='c';

5.리터럴
        :프로그램에서 직접 표현한 값이다.
        -정수리터럴 : 10진수, 8진수, 16진수, 2진수 리터럴이 있다.
                   : 정수 리터럴은 int 형으로 컴파일 한다.
                    15(10),
                    015(8진수:0으로 시작한다.),
                    0x15(16진수)
                    0b0101(2진수)

                    long타입 리터럴은 숫자 뒤에 L또는 l을 붙여 표시한다.

        -실수리터럴 : 실수리터럴은 double 형으로 컴파일 한다.
                    float f = 0.1234f;
                    doube w = 0.1234D;

        -문자리터럴 : 단일 인용부호''로 문자를 표현한다.
                      -\u 다음에 4자리 16진수(2바이트의 유니코드이다. )
                      -특수문자 리터럴은 \(백슬레시)로 시작한다.

        -논리리터럴은 : true, false 두개뿐이다.
                     -boolean c = 1; 타입불일치 오류를 내는데 C/C++과 다르게 1,0을 참거짓으로
                      사용할수 없다.

        -문자열리터럴 : "" 이중 인용부호로 표시한다. 자동으로 문자열 타입으로 인식한다.

        -null 리터럴 : 기본타입에는 사용이 불가능함, 레퍼런스에 대입해서 사용한다.


6.var 키워드
        :Java 10부터 도입된 키워드
          var와 동일한 기능으로  C++ auto키워드가 있다.
          지역변수 선언에만 사용이 가능하고
          변수 타입선언을 생략할수 있게 한다, 컴파일러가 타입을 알아서 추론하기 때문이다.

7.상수
        :final 키워드를 사용한다(절대 변하지 않는 변수를 만드는것임 )



8.자동타입변환
        :작은 타입은 큰 타입으로 자동변환된다. 컴파일러에 의해 수행되는 작업이다.
         치환문(=)이나 수식 내에서 타입이 일치하지 않는 경우에 발생한다.

         -자동타입변환이 불가능한 경우 : 큰 타입이 작은 타입으로 변환될 때
                            강제 타입변환을 하려면 괄호만들고 강제 타입변환 해줘야 한다.
                            int n = 300;
                            byte b = n; //컴파일 오류 발생
                            byte b = (byte)n; 으로 수정해줘야 한다.
                            !!그러나 값에 손실이 발생하므로 되도록이면 이런식으로
                            사용하지는 않는다.

=====================================================================================
                        이하부터 중요한 내용들이다. !!
9.자바에서 키 입력
        -System.in
          키보드로 부터 직접 읽는 자바의 표준 입력 스트림
          키 값을 바이트데이터(바이트스트림, 문자 아님)로 리턴한다.

        -Scanner 클래스
          System.in에게 키를 읽게 하고, 읽은 바이트를 문자, 정수, 실수, 불린, 문자열 등
          다양한 타입으로 변환하여 리턴한다.
          import java.util.Scanner
           ...
          Scanner scanner = new Scanner(System.in); //Scanner 객체 생성

          Scanner는 입력되는 키 값을 공백으로 구분되는 아이템 단위(토큰)로 읽는다.
          공백문자: '\t', '\f' ....
          따라서 공백을 기준으로 개발자가 원하는 다양한 타입의 값으로 바꾸어 읽을 수 있다.
          String name = scanner.next();
          String city = scanner.next();
          int age = scanner.nextln();


10.조건연산자
          ()? a : b;


11.비트연산
        -비트 논리 연산 (2행의 2진수열끼리 and or not 논리연산을 한다.)
        -비트 시프트 연산 (좌우 이동시 마다 2씩 곱하거나 나누는 연산이다.)

12.조건문
        -단순 if 문
        -if -else 문
        -다중 if-else문 (조건문이 너무 많은 경우에는 switch문 사용이 권장됨)
          switch문의 default가 if문의 else(앞의 조건이 모두 거짓인 경우)와 같다....

        -switch문
          switch (식) {
            case 값1 :
              실행문장 1;
              break;
            case 값2 :
              실행문장 2;
              break;
            default:
              실행문장 n;
          }

          break을 만나면 switch문을 벗어난다.
          break문이 없으면 다음 case문으로 자동으로 넘어가며 break문을 만날떄까지 계속
          내려가면서 case값을 따지지 않고 줄줄이 실행한다.
