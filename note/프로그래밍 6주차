1.클래스의 구성
          -접근권한  : public
          -클래스선언 : class
          -클래스이름  : Circle

          -필드의 접근 지정자 : public: 다른 모든 클래스의 접근을 허용한다.
          -생성자 : 클래스의 이름과 동일한 특별한 메소드

2.객체 생성 (new연산자)
          .1.객체에 대한 레퍼런스 변수를 선언한다
          .2.객체생성 : 클래스 타입 크기의 메모리 할당 , 객체 내 생성자 코드 실행
          .3.객체의 멤버 접근 : 객체 레퍼런스. 멤버 (.)연산자 사용하여 멤버에 접근

3.생성자
          :객체가 생성될 때 초기화를 위해 실행되는 메소드

          ####생성자 내용 정리
          -생성자 이름은 클래스 이름과 반드시 동일해야 함
          -생성자 여러개를 작성 가능하다(오버로딩)
          -생성자는 new를 통해 객체를 생성할 떄, 객체당 한 번 호출된다.
          -생성자는 리턴 타입을 지정 할 수 없다.
          -생성자의 목적은 객체의 초기화이다.
          -생성자는 객체가 생성될 때 반드시 호출된다.


          -기본생성자(default constructor)
            :매개 변수 없고 아무작업 없이 단순 리턴하는 생성자
             클래스에는 반드시 생성자가 하나 이상 있어야 하므로 개발자가
             따로 생성자를 선언하지 않는 이상 자동생성된다.
             따라서 개발자가 클래스에 생성자를 하나라도 선언한 경우
             기본생성자는 자동으로 생성되지 않는다.


4.this 레퍼런스
          :객체 자신에 대한 레퍼런스를 표현할 때 this라는 키워드를 쓰는것임
              컴파일러에 의해 자동관리 되며, 개발자는 사용하기만 하면 된다.
              << this.멤버 >> 와 같은 형태로 사용한다.
                  new 생성자를 사용해서 만들어지는 객체에 대한 레퍼런스와는 다르다.
                   ###this가 필요한 경우
                  -객체의 멤버변수와 메소드 매개변수의 이름이 같은 경우 구분을 위해 사용
                  -다른 메소드 호출시 객체 자신의 레퍼런스를 전달할 때
                  -메소드가 객체 자신의 레퍼런스를 반환할 때.

5.this() : this 메소드 (not this레퍼런스 )
          :클래스 내의 다른 생성자를 호출할 때 사용한다.
           생성자 내에서만 사용 가능하다
           반드시 생성자 코드의 제일 처음에 수행된다.

                public Book() {
                    System.out.println("생성자가 호출되었음");
                    this(null, null, 0);
                }
                #위와 같이 쓰는 경우 컴파일 오류가 된다.

6.객체의 치환
          :객체의 치환은 객체가 복사되는 것이 아니며 레퍼런스가 복사된다.
